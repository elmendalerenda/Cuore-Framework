var CollapsableDecorator = new Class({
	
	Extends: Delegable, 
	myCollapsablePanel: undefined,
	myFx: undefined,
	defaultUncollapsingStyles:undefined,
	defaultCollapsingStyles:undefined,
	unCollapsingStyles:undefined,
	collapsingStyles: undefined,
	excludedDelegatingMethod: ['collapse', 'uncollapse', 'draw', 'addHandler'],

	initialize: function(collapsablePanel) 
	{
		this.myCollapsablePanel = collapsablePanel;
		this.delegate(this.myCollapsablePanel, this.excludedDelegatingMethod);
		this.takeOwnershipOfHandlers();
	},
	
	uncollapse:function ()
	{
		if($defined(this.myCollapsablePanel.panel))
		{
			this.myFx.cancel();
			this.myFx.$events = {};
			this.startUncollapseFx();
		}
	  this.myCollapsablePanel.uncollapse();
	},
	
	collapse:function ()
	{
	   if ($defined( this.myCollapsablePanel.panel))
		{
			this.myFx.cancel();
			this.myFx.$events = {};
			this.startCollapseFx();
		}
	  this.myCollapsablePanel.collapse();
	},
	
	draw: function()
	{		
	  this.myCollapsablePanel.draw();	  
	  this.myFx = new Fx.Morph(this.myCollapsablePanel.panel, 
	  	  {transition: "Quint:out"});
	  
	  this.defaultCollapsingStyles = {"height": "0px", "padding-top":"0px", "padding-bottom":"0px"};
	  this.defaultUncollapsingStyles = {"height": this.myCollapsablePanel.renderer.panel.getScrollSize().y, "padding-top":this.myCollapsablePanel.renderer.panel.originalPaddingTop, "padding-bottom":this.myCollapsablePanel.renderer.panel.originalPaddingBottom};

	},

	startCollapseFx: function(){
		if (!$defined(this.collapsingStyles)) {
			this.myFx.start(this.defaultCollapsingStyles);
		}
		else {
			this.myFx.start(this.collapsingStyles);
		}
	},

	startUncollapseFx: function(){
		if (!$defined(this.unCollapsingStyles)) {
			this.myFx.start(this.defaultUncollapsingStyles);
		}
		else {
			this.myFx.start(this.unCollapsingStyles);
		}
	},
	
	setUnCollapsingStyles: function(styles){
	  this.unCollapsingStyles = styles;
	},

	setCollapsingStyles: function(styles){
	  this.collapsingStyles = styles;
	},
	
	addHandler: function(event, handler) {
	   this.myCollapsablePanel.addHandler(event,handler);
	   handler.setOwner(this);
	},
	
	takeOwnershipOfHandlers: function(){
		if ($defined(this.myCollapsablePanel.handlers))
		{
       	    this.myCollapsablePanel.getManagedEvents().each(function(anEvent){
		            this.myCollapsablePanel.handlers[anEvent].each(function (aHandler){
		                    this.addHandler(anEvent,aHandler);
		            },this);
			},this);
		}
	}
	           
});
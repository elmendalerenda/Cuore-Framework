var Delegable = new Class({

  delegated:undefined,
    
  delegate:function(toDelegate, methodNamesToExclude)
  {
    this.delegated = toDelegate;
    var methodsToDelegate = this.getMethodsToDelegate(methodNamesToExclude);
    
    methodsToDelegate.each(function(method) {
        this[method] = function(){ return this.delegated[method].apply(this.delegated, arguments);  }
		}, this);
    
  },  
    
  getMethodsToDelegate:function(methodNamesToExclude) {
    var result = [];
    
    if(!$defined(methodNamesToExclude))
      methodNamesToExclude = [];
    
    for (var property in this.delegated)
    {
      var thePropertyIsAFunction = typeof(this.delegated[property]) == 'function';
      var isNotAFunctionToExclude = !methodNamesToExclude.contains(property);
      
      if (thePropertyIsAFunction && isNotAFunctionToExclude)
      {
        result.push(property);
      }
    }
    return result;
  },
  
});

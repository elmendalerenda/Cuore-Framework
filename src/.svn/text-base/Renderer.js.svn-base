var Renderer = new Class({
    
    DIVNAMESUFFIX: "_inner",
    panel:undefined,
    panelClasses: [ "innerComponentDiv" ],
    container:undefined,
    
    initialize:function()
    {
      this.setContainer(document.body);
    },
    
    setContainer:function(aContainer)
    {
      this.container = aContainer;
    },
    
    getContainer:function()
    {
      return this.container;
    },
    
    innerDivName: function(componentName) {
      return componentName + this.DIVNAMESUFFIX;
    },  
    
    render: function(component)
    {
      if (!this.isDrawn())
      { 
        this.draw(component);
      } 
      this.update(component)
    },
    
    draw: function(component)
    {
        this.panel = new Element('div', {
          'id' : this.innerDivName(component.getName())
			  }).inject(this.container);
			  this.setCurrentClasses();
    },
    
    isDrawn: function()
    {
      return $defined(this.panel);
    },
    
    update: function(component)
    {
      if (this.isDrawn())
      { 
        this.updateWhenDrawn(component);
      } 
    },
    
    updateWhenDrawn: function(component)
    {
      this.panel.set('text',component.getText());
    },
    
    erase: function()
    {
      if (!$defined(this.panel))return;
      $(this.panel).destroy(); 
    },
    
    setCurrentClasses: function() {
      this.panelClasses.each(function(oneClass) {
          this.panel.addClass(oneClass);
      },this);
    },
    
    addClass: function(aClass) {
      this.panelClasses.push(aClass);
      if ($defined(this.panel)) {
        this.panel.addClass(aClass);
      }
    },

    removeClass: function(aClass) {
      this.panelClasses.erase(aClass);
      if ($defined(this.panel)) {
        this.panel.removeClass(aClass);
			}
		},
	
		getCurrentClasses: function() {
		  return this.panelClasses;
		},
		
});

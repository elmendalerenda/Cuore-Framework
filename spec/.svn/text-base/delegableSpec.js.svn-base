describe("Delegable", function() {

	it("has a method to delegate ", function() {
		var aDelegable = new Delegable();
		expect(aDelegable.delegate).toBeDefined();
	});
	
	it("delegates every function to the given object", function() {
		var aDelegable = new Delegable();
		var anObject = new Class();
		var isDelegated = false;
		
		anObject.aFunction=function()
		{
		  isDelegated = true;
		}
		
		aDelegable.delegate(anObject);
		aDelegable.aFunction();
		
		expect(isDelegated).toBeTruthy();
	});
	
	it("takes parameters to delegated functions", function() {
		var aDelegable = new Delegable();
		var anObject = new Class();
		var isDelegated = undefined;
		
		anObject.aFunction=function(aString)
		{
		  isDelegated = aString;
		}
		
		aDelegable.delegate(anObject);
		aDelegable.aFunction("test");
		
		expect(isDelegated).toEqual("test");
	});
	
	it("uses the delegate class scope", function() {
		var aDelegable = new Delegable();
		var testClass = new Class({
			name: "anyName",
			setName: function(aName)
			{
				this.name=aName;
			},
			getName: function()
			{
				return this.name;
			},
		});
			
		var anObject=new testClass();
		aDelegable.name="NotChangedName";
		aDelegable.delegate(anObject);
		aDelegable.setName("test");
    
	    expect(anObject.getName()).toEqual("test");	    
	    expect(aDelegable.name).toEqual("NotChangedName");	    
	});
	
	it("accepts a list of method names to exclude from delegation", function(){

		var aDelegable = new Delegable();
		var anObject = new Class();
		aDelegable.aFunction=function(){};
		anObject.aFunction=function(){};
		spyOn(anObject, 'aFunction');
		spyOn(aDelegable, 'aFunction');
	   
		var excludedMethods = ['aFunction'];
		aDelegable.delegate(anObject, excludedMethods);
      	aDelegable.aFunction();
		
		expect(anObject.aFunction).not.toHaveBeenCalled();
		expect(aDelegable.aFunction).toHaveBeenCalled();
	});
	
	
	
	
	
	
});